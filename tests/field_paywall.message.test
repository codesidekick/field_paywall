<?php

/**
 * @file
 * Tests for message display of Paywall field.
 *
 * Uses Field API field_test helpers.
 */

/**
 * Tests for Paywall field message display.
 */
class FieldPaywallMessageTestCase extends NodeWebTestCase {
  protected $field;
  protected $instance;
  protected $webUser;

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name'  => 'Paywall field: Message',
      'description'  => 'Test whether the Paywall field shows the configured messages.',
      'group' => 'Paywall field',
    );
  }

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    parent::setUp('field_paywall');
    $this->webUser = $this->drupalCreateUser(array('create article content', 'create page content'));
    $this->drupalLogin($this->webUser);
  }

  /**
   * Test role based Paywall field activation.
   */
  protected function testPaywallMessage() {
    $default_message = 'Default message';

    // Create a field with settings to validate.
    $this->field = array(
      'field_name' => drupal_strtolower($this->randomName()),
      'type' => 'field_paywall',
      'settings' => array(),
    );
    field_create_field($this->field);
    $this->instance = array(
      'field_name' => $this->field['field_name'],
      'entity_type' => 'node',
      'bundle' => 'page',
      'widget' => array(
        'type' => 'field_paywall_widget',
      ),
      'display' => array(
        'default' => array(
          'type' => 'field_paywall_default',
        ),
      ),
      'default_value' => array(
        0 => array(
          'message' => $default_message,
          'roles' => array(2 => 2),
          'fields_hidden' => array(),
        ),
      ),
    );
    field_create_instance($this->instance);

    // Display creation form.
    $this->drupalGet('node/add/page');
    $langcode = LANGUAGE_NONE;
    $this->assertFieldByName("{$this->field['field_name']}[$langcode][paywall][message]", $default_message, 'Message field is displayed');

    // Submit a signed decimal value within the allowed precision and scale.
    $test_message = 'Paywall test message';

    // Set the test message.
    $edit = array(
      'title' => drupal_strtolower($this->randomName()),
      "{$this->field['field_name']}[$langcode][paywall][message]" => $test_message,
    );
    $this->drupalPost(NULL, $edit, t('Save'));

    $this->assertRaw($test_message, 'Paywall message is displayed.');
    $this->assertNoRaw($default_message, 'Default message is not displayed.');
  }
}
